const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const session = require('express-session');
const bcrypt = require('bcrypt');
const { check, validationResult } = require('express-validator');
const path = require('path');

const app = express();
app.setMaxListeners(15); // Set the maximum number of listeners to 15

const PORT = process.env.PORT || 3000;

app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static('public'));
app.use(session({ secret: 'your-secret-key', resave: true, saveUninitialized: true }));

mongoose.connect('mongodb://localhost:27017/Airline-management', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    //useCreateIndex: true, // Ensure you have this line to avoid the MongoDB deprecation warning
})
    .then(() => {
        console.log('Connected to MongoDB');
    })
    .catch((error) => {
        console.error('Error connecting to MongoDB:', error);
    });

const User = mongoose.model('User', new mongoose.Schema({
    name: { type: String, required: true },
    mobile: { type: String, required: true },
    username: { type: String, unique: true, required: true },
    password: { type: String, required: true }
}));



app.set('views', path.join(__dirname, 'views'));

// Home route
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'views', 'interface.html'));
});

// Login route
app.get('/login', (req, res) => {
    res.sendFile(path.join(__dirname, 'views', 'login.html'));
});

// Login route with server-side validation
app.post('/login', [
    check('username'),
    check('password'),
], async (req, res) => {
    const errors = validationResult(req);

    if (!errors.isEmpty()) {
        return res.status(400).render(path.join('views', 'login'), { errors: errors.array() });
    }

    const { username, password } = req.body;

    try {
        const user = await User.findOne({ username });

        if (user && bcrypt.compareSync(password, user.password)) {
            // Check if the user is already logged in
            if (req.session.user) {
                res.redirect('/flight');
            } else {
                req.session.user = user;
                res.redirect('/flight');
            }
        } else {
            res.render(path.join('views', 'login'), { errors: [{ msg: 'Invalid username or password' }] });
        }
    } catch (error) {
        console.error('Error during login:', error);
        res.status(500).send('Internal Server Error');
    }
});
app.get('/registration', (req, res) => {
    res.sendFile(path.join(__dirname, 'views', 'registration.html'));
});

app.post('/registration', [
    // ... your validation middleware
], async (req, res) => {
    const errors = validationResult(req);

    if (!errors.isEmpty()) {
        return res.status(400).render(path.join('views', 'registration'), { errors: errors.array() });
    }

    const { name, mobile, username, password } = req.body;

    try {
        const hashedPassword = bcrypt.hashSync(password, 10);
        const user = new User({ name, mobile, username, password: hashedPassword });

        // Save the user to MongoDB
        await user.save();

        res.redirect('/login');
    } catch (error) {
        console.error('Error saving user to MongoDB:', error);
        res.status(500).send('Internal Server Error');
    }
});

app.get('/flight', (req, res) => {
    res.sendFile(path.join(__dirname, 'views', 'flight.html'));
});

app.post('/flight', [
    check('seatNumber').notEmpty(),
    // Add validation for other fields in the FlightUser schema as needed
], async (req, res) => {
    const errors = validationResult(req);

    if (!errors.isEmpty()) {
        return res.status(400).render(path.join('views', 'flight'), { errors: errors.array() });
    }

    // Create a new FlightUser document
    const { seatNumber } = req.body;
    const flightUser = new FlightUser({
        seatNumber,
        // Add other fields based on your schema
    });

    try {
        // Save the FlightUser document to the database
        await flightUser.save();

        // Redirect or send a response as needed
        res.redirect('/flight-success'); // Redirect to a success page
    } catch (error) {
        console.error('Error during flight user creation:', error);
        res.status(500).send('Internal Server Error');
    }
});

// ... (Other routes)
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
